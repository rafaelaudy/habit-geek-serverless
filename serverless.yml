org: rafaelaudy
app: habit-geek
service: habit-geek-serverless

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-pseudo-parameters

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  serverless-offline:
    port: 4000
  DB_NAME: habitgeek
  USERNAME: geek
  PASSWORD: ${file(./secrets.json):DBPassword}
  AURORA:
    HOST:
      Fn::GetAtt: [AuroraRDSCluster, Endpoint.Address]
    PORT:
      Fn::GetAtt: [AuroraRDSCluster, Endpoint.Port]
    VPC_CIDR: 10

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  environment:
    AURORA_HOST: ${self:custom.AURORA.HOST}
    AURORA_PORT: ${self:custom.AURORA.PORT}
    DB_NAME: ${self:custom.DB_NAME}
    USERNAME: ${self:custom.USERNAME}
    PASSWORD: ${self:custom.PASSWORD}

resources:
  Resources:
    ServerlessInternetGateway: ${file(./serverless/ServerlessInternetGateway.yml)}
    ServerlessVPC: ${file(./serverless/ServerlessVPC.yml)}
    ServerlessVPCGA: ${file(./serverless/ServerlessVPCGA.yml)}
    ServerlessSubnetA: ${file(./serverless/ServerlessSubnetA.yml)}
    ServerlessSubnetB: ${file(./serverless/ServerlessSubnetB.yml)}
    ServerlessSubnetC: ${file(./serverless/ServerlessSubnetC.yml)}
    ServerlessSubnetGroup: ${file(./serverless/ServerlessSubnetGroup.yml)}
    ServerlessSecurityGroup: ${file(./serverless/ServerlessSecurityGroup.yml)}

    AuroraRDSClusterParameter: ${file(./serverless/AuroraRDSClusterParameter.yml)}
    AuroraRDSInstanceParameter: ${file(./serverless/AuroraRDSInstanceParameter.yml)}
    AuroraRDSCluster: ${file(./serverless/AuroraRDSCluster.yml)}
    AuroraRDSInstance: ${file(./serverless/AuroraRDSInstance.yml)}

functions:
  graphql:
    handler: src/graphql.graphqlHandler
    environment:
      SLS_DEBUG: true
    events:
      - http:
          path: graphql
          method: post
          cors: true
          integration: lambda-proxy

      - http:
          path: graphql
          method: get
          cors: true
          integration: lambda-proxy
